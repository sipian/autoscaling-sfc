#!/bin/sh

##########################
#### General Settings ####
##########################

set -e
set -u
#set -x # only for DEBUG

# Make available the functions defined in /lib/lsb/init-functions
. /lib/lsb/init-functions


##########################
#### Global Variables ####
##########################



#############################
#### VIM-Drivers Plugins ####
#############################

#installVIMDriverPlugins () {
#    read -p "Do you want to install any of the available VIM-Driver Plugins? [Y/n]: " yn
#    if [ "${yn}" != "n" -a "${yn}" != "N" ]; then
#        echo "Options available are: "
#        echo "    1. Download 'OpenStack' VIM-Driver Plugin"
#        echo "    2. Download 'XYZ' VIM-Driver Plugin"
#        read -p "Insert the number(s) of the plugin(s) you want to install (in case of multiple plugins insert the numbers separated by a space - e.g. 1 2) [no default]: " plugins
#        if [ "${plugins}" = "" ]; then
#            installVIMDriverPlugins
#        else
#            set -- ${plugins} # Create the array for the cycle for
#            for plug in ${@}
#            do
#                case ${plug} in
#                    1 ) installOpenStackVIMPlugin ;;
#                    2 ) installXYZVIMPlugin ;;
#                    * ) installVIMDriverPlugins ;;
#                esac
#            done
#        fi
#    fi
#}


####################
#### Open Baton ####
####################

deb_add_openbaton_repo_reference () {
    export codename=${1}

    # Add Open Baton Public Key to the APT keys
    $_ex 'wget -O - http://get.openbaton.org/keys/public.gpg.key | apt-key add -'

    # Add Open Baton Repo to sources.list file
    result=$(grep /etc/apt/sources.list -e "deb http://get.openbaton.org/repos/apt/debian/ ${codename} main" | wc -l)
    if [ ${result} -eq 0 ]; then
        $_ex 'echo "\ndeb http://get.openbaton.org/repos/apt/debian/ ${codename} main" >> /etc/apt/sources.list'
    fi
    $_ex 'apt-get update'
}

##############
#### NFVO ####

deb_install_nfvo () {
    export codename=${1}

    # Install the correct NFVO package according to the given input parameter
    if [ "${codename}" = "stable" ]; then
        $_ex 'apt-get install -y openbaton-nfvo'
    else
        $_ex 'apt-get install -y openbaton-nfvo-nightly'
    fi    
}

deb_restart_nfvo () {
    if $_ex 'systemctl restart openbaton-nfvo.service' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton NFVO .."
    elif $_ex 'restart openbaton-nfvo' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton NFVO .."
    else
        log_failure_msg "Restaring the Open Baton NFVO"
    fi
}

###############################
#### Additional Components ####

deb_install_additional_component () {
    export codename=${1}
    export component_name=${2}
    export component_name_fancy="${3}"
    export component_of_minimal_installation="${4}"

    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        # Ask for the specified Additional Component installation
        read -p "Do you want to install also the ${component_name_fancy}? (if you do not, then you can still install it later with 'sudo apt-get install openbaton-${component_name}') (Y/n): " ac

        # Print correct warning message
        if [ "${ac}" = "n" -o "${ac}" = "N" ]; then
            echo " * [WARN] Open Baton ${component_name_fancy} not installed"
            if [ "${codename}" = "stable" ]; then
                echo " * To install the latest release package:"
                echo " *     sudo apt-get install openbaton-${component_name}"
            else
                echo " * To install the latest nightly-build package:"
                echo " *     sudo apt-get install openbaton-${component_name}-nightly"
            fi
            return
        else
            # Install the correct Additional Component package according to the given input parameter
            if [ "${codename}" = "stable" ]; then
                $_ex 'apt-get install -y openbaton-${component_name}'
            else
                $_ex 'apt-get install -y openbaton-${component_name}-nightly'
            fi
        fi
    else
        if [ "${component_of_minimal_installation}" = "true" ]; then
            # Install the correct Additional Component package according to the given input parameter
            if [ "${codename}" = "stable" ]; then
                $_ex 'apt-get install -y openbaton-${component_name}'
            else
                $_ex 'apt-get install -y openbaton-${component_name}-nightly'
            fi
        fi
    fi
}

deb_restart_additional_component () {
    export component_name=${1}
    export component_name_fancy="${2}"

    if $_ex 'systemctl restart openbaton-${component_name}.service' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton ${component_name_fancy} .."
    elif $_ex 'restart openbaton-${component_name}' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton ${component_name_fancy} .."
    else                                                        
        log_failure_msg "Restarting the Open Baton ${component_name_fancy}"
    fi
}

deb_is_additional_component_installed () {
    export component_name=${1}

    installed=$(dpkg -l | grep -v grep | grep "openbaton-${component_name}" | wc -l)
    if [ ${installed} -eq 0 ]; then
        installed=1 # not installed
    else
        installed=0 # installed
    fi
}


###################
#### Bootstrap ####
###################

deb_bootstrap () {
    prereq
    deb_add_openbaton_repo_reference ${1}
    deb_install_nfvo ${1}
    install_mysql "openbaton-nfvo.properties"
    deb_install_additional_component stable plugin-vimdriver-openstack "OpenStack VIM-Driver Plugin" true
    # Arguments of "deb_install_additional_component": ${1} component-name component-name-fancy component_of_a_minimal_installation
    deb_install_additional_component ${1} vnfm-generic "Generic VNFM" true
    deb_install_additional_component ${1} fms "Fault Management System" false
    deb_install_additional_component ${1} ase "Auto Scaling Engine" false
    deb_install_additional_component ${1} nse "Network Slicing Engine" false
    deb_install_additional_component ${1} cli "Command Line Interface (CLI)" false
    fix_java_security
    configure_security "openbaton-nfvo.properties"
    
    #########
    # Temporary workaround to avoid the spawning of multiple 'Test VIM Driver Plugin' processes during installation
    log_success_msg "Finalising Open Baton installation .."
    sleep 60
    #########
    
    deb_restart_nfvo
    deb_is_additional_component_installed vnfm-generic ; if [ "${installed}" = "0" ]; then deb_restart_additional_component vnfm-generic "Generic VNFM" ; fi
    deb_is_additional_component_installed fms ; if [ "${installed}" = "0" ]; then deb_restart_additional_component fms "Fault Management System" ; fi
    deb_is_additional_component_installed ase ; if [ "${installed}" = "0" ]; then deb_restart_additional_component ase "Auto Scaling Engine" ; fi
    deb_is_additional_component_installed nse ; if [ "${installed}" = "0" ]; then deb_restart_additional_component nse "Network Slicing Engine" ; fi

    rm ${BOOTSTRAP_DIR}/bootstrap-deb-functions
}

