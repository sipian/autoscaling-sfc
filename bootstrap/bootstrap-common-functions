#!/bin/sh

##########################
#### General Settings ####
##########################

set -u
#set -x # only for DEBUG


##########################
#### Global Variables ####
##########################

BOOTSTRAP_DIR=$(pwd)

OPENBATON_NFVO_REPO_NAME="NFVO"
OPENBATON_CLI_REPO_NAME="openbaton-cli"
OPENBATON_PLUGINS_VIMDRIVERS_TEST_REPO_NAME="test-plugin"
OPENBATON_PLUGINS_VIMDRIVERS_OPENSTACK_4J_REPO_NAME="openstack4j-plugin"
OPENBATON_PLUGINS_MONITORING_ZABBIX_REPO_NAME="zabbix-plugin"
OPENBATON_VNFM_GENERIC_REPO_NAME="generic-vnfm"
OPENBATON_FMS_REPO_NAME="fm-system"
OPENBATON_ASE_REPO_NAME="autoscaling-engine"
OPENBATON_NSE_REPO_NAME="network-slicing-engine"

OPENBATON_HOME_REPO_URL="https://github.com/openbaton/"
OPENBATON_NFVO_REPO_URL="https://github.com/openbaton/NFVO"
OPENBATON_CLI_REPO_URL="https://github.com/openbaton/openbaton-cli"
OPENBATON_PLUGINS_VIMDRIVERS_TEST_REPO_URL="https://github.com/openbaton/test-plugin"
OPENBATON_PLUGINS_VIMDRIVERS_OPENSTACK_4J_REPO_URL="https://github.com/openbaton/openstack4j-plugin"
OPENBATON_PLUGINS_MONITORING_ZABBIX_REPO_URL="https://github.com/openbaton/zabbix-plugin.git"
OPENBATON_VNFM_GENERIC_REPO_URL="https://github.com/openbaton/generic-vnfm"
OPENBATON_FMS_REPO_URL="https://github.com/openbaton/fm-system"
OPENBATON_ASE_REPO_URL="https://github.com/openbaton/autoscaling-engine"
OPENBATON_NSE_REPO_URL="https://github.com/openbaton/network-slicing-engine"

OPENJDK_7_LINUX_X86_64_SECURITYFILE="/usr/lib/jvm/java-7-openjdk-amd64/jre/lib/security/java.security"
OPENJDK_7_LINUX_I386_SECURITYFILE="/usr/lib/jvm/java-7-openjdk-i386/jre/lib/security/java.security"
OPENJDK_8_LINUX_X86_64_SECURITYFILE="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security"
OPENJDK_8_LINUX_I386_SECURITYFILE="/usr/lib/jvm/java-8-openjdk-i386/jre/lib/security/java.security"
OPENJDK_7_OSX_SECURITYFILE="/Library/Java/JavaVirtualMachines/jdk1.7.*.jdk/Contents/Home/jre/lib/security/java.security"

HTTPS_DEFAULT=no
MYSQL_DEFAULT=yes
OPENBATON_NFVO_MYSQL_USER_DEFAULT=admin
OPENBATON_NFVO_MYSQL_USER_PASSWORD_DEFAULT=root
MYSQL_ROOT_PASSWORD_DEFAULT=root

RABBITMQ_BROKER_IP_DEFAULT="localhost"
RABBITMQ_MANAGEMENT_PORT_DEFAULT=15672
RABBITMQ_EMS_USER="openbaton-ems-user"

OPENBATON_BASE_CONFIG_DIR="/etc/openbaton"
OPENBATON_SOURCE_INSTALLATION_BASE_DIR="/opt/openbaton"

OPENBATON_NFVO_CONFIG_FILE="openbaton-nfvo.properties"
OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE="${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NFVO_CONFIG_FILE}"
OPENBATON_PLUGIN_MONITORING_ZABBIX_CONFIG_FILE="openbaton-plugin-monitoring-zabbix.properties"
OPENBATON_PLUGIN_MONITORING_ZABBIX_CONFIG_FILE_ABSOLUTE="${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_PLUGIN_MONITORING_ZABBIX_CONFIG_FILE}"
OPENBATON_VNFM_GENERIC_CONFIG_FILE="openbaton-vnfm-generic.properties"
OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE="${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_VNFM_GENERIC_CONFIG_FILE}"
OPENBATON_FMS_CONFIG_FILE="openbaton-fms.properties"
OPENBATON_FMS_CONFIG_FILE_ABSOLUTE="${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_FMS_CONFIG_FILE}"
OPENBATON_ASE_CONFIG_FILE="openbaton-ase.properties"
OPENBATON_ASE_CONFIG_FILE_ABSOLUTE="${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_ASE_CONFIG_FILE}"
OPENBATON_NSE_CONFIG_FILE="openbaton-nse.properties"
OPENBATON_NSE_CONFIG_FILE_ABSOLUTE="${OPENBATON_BASE_CONFIG_DIR}/${OPENBATON_NSE_CONFIG_FILE}"

OPENBATON_LOG_DIR="/var/log/openbaton"
OPENBATON_PLUGINS_LOG_DIR="plugins"
OPENBATON_PLUGINS_LOG_DIR_ABSOLUTE="${OPENBATON_LOG_DIR}/${OPENBATON_PLUGINS_LOG_DIR}"

OPENBATON_PLUGIN_VIMDRIVER_TEST_DEFAULT=yes
OPENBATON_PLUGIN_VIMDRIVER_OPENSTACK_DEFAULT=yes
OPENBATON_PLUGIN_MONITORING_ZABBIX_DEFAULT=no
OPENBATON_VNFM_GENERIC_DEFAULT=yes
OPENBATON_FMS_DEFAULT=no
OPENBATON_ASE_DEFAULT=no
OPENBATON_NSE_DEFAULT=no
OPENBATON_CLI_DEFAULT=no
openbaton_plugin_vimdriver_test=${openbaton_plugin_vimdriver_test:-$OPENBATON_PLUGIN_VIMDRIVER_TEST_DEFAULT}
openbaton_plugin_vimdriver_openstack=${openbaton_plugin_vimdriver_openstack:-$OPENBATON_PLUGIN_VIMDRIVER_OPENSTACK_DEFAULT}
openbaton_plugin_monitoring_zabbix=${openbaton_plugin_monitoring_zabbix:-$OPENBATON_PLUGIN_MONITORING_ZABBIX_DEFAULT}
openbaton_vnfm_generic=${openbaton_vnfm_generic:-$OPENBATON_VNFM_GENERIC_DEFAULT}
openbaton_fms=${openbaton_fms:-$OPENBATON_FMS_DEFAULT}
openbaton_ase=${openbaton_ase:-$OPENBATON_ASE_DEFAULT}
openbaton_nse=${openbaton_nse:-$OPENBATON_NSE_DEFAULT}
openbaton_cli=${openbaton_cli:-$OPENBATON_CLI_DEFAULT}

OPENBATON_NFVO_VERSION_DEFAULT="latest"
OPENBATON_PLUGIN_VIMDRIVER_TEST_VERSION_DEFAULT="latest"
OPENBATON_PLUGIN_VIMDRIVER_OPENSTACK_VERSION_DEFAULT="latest"
OPENBATON_PLUGIN_MONITORING_ZABBIX_VERSION_DEFAULT="latest"
OPENBATON_VNFM_GENERIC_VERSION_DEFAULT="latest"
OPENBATON_FMS_VERSION_DEFAULT="latest"
OPENBATON_ASE_VERSION_DEFAULT="latest"
OPENBATON_NSE_VERSION_DEFAULT="latest"
openbaton_nfvo_version=${openbaton_nfvo_version:-$OPENBATON_NFVO_VERSION_DEFAULT}
openbaton_plugin_vimdriver_test_version=${openbaton_plugin_vimdriver_test_version:-$OPENBATON_PLUGIN_VIMDRIVER_TEST_VERSION_DEFAULT}
openbaton_plugin_vimdriver_openstack_version=${openbaton_plugin_vimdriver_openstack_version:-$OPENBATON_PLUGIN_VIMDRIVER_OPENSTACK_VERSION_DEFAULT}
openbaton_plugin_monitoring_zabbix_version=${openbaton_plugin_monitoring_zabbix_version:-$OPENBATON_PLUGIN_MONITORING_ZABBIX_VERSION_DEFAULT}
openbaton_vnfm_generic_version=${openbaton_vnfm_generic_version:-$OPENBATON_VNFM_GENERIC_VERSION_DEFAULT}
openbaton_fms_version=${openbaton_fms_version:-$OPENBATON_FMS_VERSION_DEFAULT}
openbaton_ase_version=${openbaton_ase_version:-$OPENBATON_ASE_VERSION_DEFAULT}
openbaton_nse_version=${openbaton_nse_version:-$OPENBATON_NSE_VERSION_DEFAULT}

ZABBIX_PLUGIN_IP_DEFAULT=localhost
ZABBIX_SERVER_IP_DEFAULT=localhost
ZABBIX_USER_DEFAULT=Admin
ZABBIX_USER_PASSWORD_DEFAULT=zabbix


###############
#### Utils ####
###############

compare_version_strings () {
    validating_version=${1}
    to_be_validated_version=${2}

    if [ "$(printf "${validating_version}\n${to_be_validated_version}" | sort -V | head -n1)" = "${validating_version}" ] && [ "${validating_version}" != "${to_be_validated_version}" ]; then
        #echo "'${to_be_validated_version}' is greater than '${validating_version}'"
        return 1
    else
        if [ "${validating_version}" = "${to_be_validated_version}" ]; then
            #echo "'${to_be_validated_version}' is equal to '${validating_version}'"
            return 0
        else
            #echo "'${to_be_validated_version}' is lesser than '${validating_version}'"
            return 2
        fi
   fi
}


##################
#### Security ####
##################

enable_https () {
    export OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE=${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}

    # In case of "noninteractive" FRONTEND the default value will remain valid (see in lines below)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        if (whiptail --title "Open Baton NFV Orchestrator (NFVO) configuration" --yesno "Do you want to enable HTTPS?" 8 140) then
            https="yes"
        else
            https="no"
        fi
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi
    fi

    https=${https:-$HTTPS_DEFAULT}

    if [ "${https}" = "y" -o "${https}" = "Y" -o "${https}" = "yes" ]; then
        log_success_msg "Enabling HTTPS .."

        # server.port = 8443
        $_ex 'sed -i "s|#\s*server.port\s*=\s*8443|server.port=8443|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
        # server.ssl.enabled = true
        $_ex 'sed -i "s|#\s*server.ssl.enabled\s*=\s*true|server.ssl.enabled=true|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
        # server.ssl.key-store = /etc/openbaton/keystore.p12
        $_ex 'sed -i "s|#\s*server.ssl.key-store\s*=\s*\/etc\/openbaton\/keystore.p12|server.ssl.key-store=\/etc\/openbaton\/keystore.p12|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
        # server.ssl.key-store-password = password
        $_ex 'sed -i "s|#\s*server.ssl.key-store-password\s*=\s*password|server.ssl.key-store-password=password|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
        # server.ssl.keyStoreType = PKCS12
        $_ex 'sed -i "s|#\s*server.ssl.keyStoreType\s*=\s*PKCS12|server.ssl.keyStoreType=PKCS12|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
        # server.ssl.keyAlias = tomcat
        $_ex 'sed -i "s|#\s*server.ssl.keyAlias\s*=\s*tomcat|server.ssl.keyAlias=tomcat|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
        # nfvo.https = false
        $_ex 'sed -i "s|#\s*nfvo.https\s*=\s*false|nfvo.https=true|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
    fi
}

fix_jvm_delay_for_random_number_generation () {
    java7_installed="false"
    result=$( dpkg -l | grep "openjdk-7-jre" | wc -l)
    if [ ${result} -gt 0 ]; then
        java7_installed="true"
    fi

    if [ "${OS_TYPE}" = "Linux" ]; then
        if [ "${OS_ARCHITECTURE}" = "x86_64" ]; then
            if [ "${OS_DISTRIBUTION_RELEASE_MAJOR}" -ge "16" -a "${java7_installed}" != "true" ]; then # Ubuntu 16
                export OPENJDK_8_LINUX_X86_64_SECURITYFILE=${OPENJDK_8_LINUX_X86_64_SECURITYFILE}
                $_ex 'sed -i "s|securerandom.source=file:/dev/random|securerandom.source=file:/dev/./urandom|g" ${OPENJDK_8_LINUX_X86_64_SECURITYFILE}'
            else # Ubuntu 14
                export OPENJDK_7_LINUX_X86_64_SECURITYFILE=${OPENJDK_7_LINUX_X86_64_SECURITYFILE}
                $_ex 'sed -i "s|securerandom.source=file:/dev/urandom|securerandom.source=file:/dev/./urandom|g" ${OPENJDK_7_LINUX_X86_64_SECURITYFILE}'
            fi
        else # i386
            if [ "${OS_DISTRIBUTION_RELEASE_MAJOR}" -ge "16" -a "${java7_installed}" != "true" ]; then # Ubuntu 16
                export OPENJDK_8_LINUX_I386_SECURITYFILE=${OPENJDK_8_LINUX_I386_SECURITYFILE}
                $_ex 'sed -i "s|securerandom.source=file:/dev/random|securerandom.source=file:/dev/./urandom|g" ${OPENJDK_8_LINUX_I386_SECURITYFILE}'
            else # Ubuntu 14
                export OPENJDK_7_LINUX_I386_SECURITYFILE=${OPENJDK_7_LINUX_I386_SECURITYFILE}
                $_ex 'sed -i "s|securerandom.source=file:/dev/urandom|securerandom.source=file:/dev/./urandom|g" ${OPENJDK_7_LINUX_I386_64_SECURITYFILE}'
            fi
        fi
    elif [ "${ostype}" = "Darwin" ]; then
        export OPENJDK_7_OSX_SECURITYFILE=${OPENJDK_7_OSX_SECURITYFILE}
        $_ex 'sed -i "" "s|securerandom.source=file:/dev/urandom|securerandom.source=file:/dev/./urandom|g" ${OPENJDK_7_OSX_SECURITYFILE}'
    fi
}


###############
#### MySQL ####
###############

configure_mysql () {
    export OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE=${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}

    log_success_msg "Configuring MySQL for Open Baton .."

    $_ex 'sed -i "s|spring.datasource.url\s*=\s*jdbc:hsqldb:file:\/tmp\/openbaton\/openbaton.hsdb|spring.datasource.url=jdbc:mysql:\/\/localhost:3306\/openbaton|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
    $_ex 'sed -i "s|spring.datasource.driver-class-name\s*=\s*org.hsqldb.jdbc.JDBCDriver|spring.datasource.driver-class-name=org.mariadb.jdbc.Driver|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
    $_ex 'sed -i "s|spring.jpa.database-platform\s*=\s*org.hibernate.dialect.HSQLDialect|spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    $_ex 'sed -i "s|spring.jpa.hibernate.ddl-auto\s*=\s*.*|spring.jpa.hibernate.ddl-auto=update|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    $_ex 'sed -i "s|#\s*spring.datasource.validationQuery\s*=\s*SELECT 1|spring.datasource.validationQuery=SELECT 1|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'
    $_ex 'sed -i "s|#\s*spring.datasource.testOnBorrow\s*=\s*true|spring.datasource.testOnBorrow=true|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    # Enable MySQL

    # In case of "noninteractive" FRONTEND the default value will remain valid (openbaton_nfvo_mysql_user: admin ; openbaton_nfvo_mysql_user_password: root)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        openbaton_nfvo_mysql_user=$(whiptail --inputbox "\nPlease, type the name of the MySQL user you would like the Open Baton NFVO to use [admin]:" 8 140 admin --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi

        openbaton_nfvo_mysql_user_password=$(whiptail --passwordbox "\nPlease, provide the password for this user [root]:" 8 140 root --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi

        mysql_root_password=$(whiptail --passwordbox "\nPlease, provide the password of the 'root' user of MySQL [root]:" 8 140 root --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi
    fi

    # Set the mysql user
    export openbaton_nfvo_mysql_user=${openbaton_nfvo_mysql_user:-$OPENBATON_NFVO_MYSQL_USER_DEFAULT}
    $_ex 'sed -i "s|spring.datasource.username\s*=\s*.*|spring.datasource.username=${openbaton_nfvo_mysql_user}|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    # Set the mysql user's password
    export openbaton_nfvo_mysql_user_password=${openbaton_nfvo_mysql_user_password:-$OPENBATON_NFVO_MYSQL_USER_PASSWORD_DEFAULT}
    $_ex 'sed -i "s|spring.datasource.password\s*=\s*.*|spring.datasource.password=${openbaton_nfvo_mysql_user_password}|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    result=$(ps aux | grep -v 'grep' | grep 'mysql' | wc -l)
    if [ ${result} -le 0 ]; then
        $_ex 'service mysql start'
    fi
    export mysql_root_password=${mysql_root_password:-$MYSQL_ROOT_PASSWORD_DEFAULT}
    # Create the Database
    mysql -uroot -p${mysql_root_password} -e "CREATE DATABASE openbaton /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -uroot -p${mysql_root_password} -e "CREATE USER ${openbaton_nfvo_mysql_user}@localhost IDENTIFIED BY '${openbaton_nfvo_mysql_user_password}';"
    mysql -uroot -p${mysql_root_password} -e "GRANT ALL ON openbaton.* TO '${openbaton_nfvo_mysql_user}'@'localhost';"
    mysql -uroot -p${mysql_root_password} -e "FLUSH PRIVILEGES;"
    mysql -uroot -p${mysql_root_password} -e "USE openbaton;"
}

install_mysql () {
    mysql=${mysql:-$MYSQL_DEFAULT}

    # In case of "noninteractive" FRONTEND the default value will remain valid (mysql: yes)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        if (whiptail --title "Open Baton NFV Orchestrator (NFVO) configuration" --yesno "Do you want to enable the Open Baton persistence through MySQL?" 8 140) then
            mysql="yes"
        else
            mysql="no"
        fi
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting Open Baton installation"
            exit 1
        fi
    else
        if [ "${mysql}" = "" -o "${mysql}" = "y" -o "${mysql}" = "Y" -o "${mysql}" = "yes" ]; then
            export mysql_root_password=${mysql_root_password:-$MYSQL_ROOT_PASSWORD_DEFAULT}
            log_warning_msg "The root password used for the installation is: '${mysql_root_password}'"

            # TODO OSX support for non interactive installation
            $_ex 'apt-get install -y debconf-utils'
            $_ex 'echo mysql-server mysql-server/root_password password ${mysql_root_password} | debconf-set-selections'
            $_ex 'echo mysql-server mysql-server/root_password_again password ${mysql_root_password} | debconf-set-selections'
        fi
    fi

    if [ "${mysql}" = "" -o "${mysql}" = "y" -o "${mysql}" = "Y" -o "${mysql}" = "yes" ]; then
        echo " * Enabling MySQL Persistence"
        $_ex 'apt-get update'
        $_ex 'apt-get install -y mysql-server'
        configure_mysql 
    else
        echo " * NOT Enabling MySQL Persistence"
    fi
}


##################
#### RabbitMQ ####
##################

retrieve_rabbitmqadmin_cli () {
    rabbitmq_broker_ip=${1}
    rabbitmq_management_port=${2}

    # Retrieve rabbitmqadmin cli
    wget -O rabbitmqadmin http://${rabbitmq_broker_ip}:${rabbitmq_management_port}/cli/rabbitmqadmin
    if [ $? -ne 0 ]; then
        log_failure_msg "rabbitmqadmin utility not retrievable"
        exit 1
    fi

    $_ex "chmod +x ./rabbitmqadmin"
    $_ex "apt-get install -y python"
}

configure_remote_rabbitmq () {
    export OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE=${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}

    log_success_msg "Configuring remote RabbitMQ for Open Baton"

    openbaton_nfvo_version=$(whiptail --inputbox "\nPlease, provide the Open Baton NFVO version for which you want to configure the RabbitMQ Broker [latest]:\nVersion format:\n 1) X.Y.Z for specific debian release/source tag\n 2) 'latest' if the develop source code branch is installed)" 25 140 latest --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
    exit_status="$?"
    if [ ${exit_status} != 0 ]; then
        echo ""
        log_warning_msg "Aborting remote RabbitMQ configuration"
        exit 1
    fi
    openbaton_nfvo_version=${openbaton_nfvo_version:-$OPENBATON_NFVO_VERSION_DEFAULT}

    rabbitmq_broker_ip=$(whiptail --inputbox "\nPlease, provide the IP of the remote RabbitMQ Broker [localhost]:" 8 140 localhost --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
    exit_status="$?"
    if [ ${exit_status} != 0 ]; then
        echo ""
        log_warning_msg "Aborting remote RabbitMQ configuration"
        exit 1
    fi
    rabbitmq_management_port=$(whiptail --inputbox "\nPlease, provide the 'management port' of the remote RabbitMQ Broker [15672]:" 8 140 15672 --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
    exit_status="$?"
    if [ ${exit_status} != 0 ]; then
        echo ""
        log_warning_msg "Aborting remote RabbitMQ configuration"
        exit 1
    fi
    rabbitmq_broker_ip=${rabbitmq_broker_ip:-$RABBITMQ_BROKER_IP_DEFAULT}
    rabbitmq_management_port=${rabbitmq_management_port:-$RABBITMQ_MANAGEMENT_PORT_DEFAULT}

    retrieve_rabbitmqadmin_cli ${rabbitmq_broker_ip} ${rabbitmq_management_port}

    #### NFVO configuration
    if (whiptail --title "Open Baton NFV Orchestrator (NFVO) configuration" --yesno "Does an 'admin' user exist in the remote RabbitMQ Broker on the '${rabbitmq_broker_ip}' host?" 8 140) then
        rabbitmq_admin_user="yes"
    else
        rabbitmq_admin_user="no"
    fi
    exit_status="$?"
    if [ ${exit_status} != 0 ]; then
        echo ""
        log_warning_msg "Aborting Open Baton installation"
        exit 1
    fi

    if [ "${rabbitmq_admin_user}" = "" -o "${rabbitmq_admin_user}" = "y" -o "${rabbitmq_admin_user}" = "Y" -o "${rabbitmq_admin_user}" = "yes" ]; then
        rabbitmq_admin_password=$(whiptail --passwordbox "\nPlease, provide the 'admin' password of the remote RabbitMQ Broker on the '${rabbitmq_broker_ip}' host:" 8 140 --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting remote RabbitMQ configuration"
            exit 1
        fi
    else
        rabbitmq_user_username=$(whiptail --inputbox "\nPlease, provide the username of an existing user of the remote RabbitMQ Broker on the '${rabbitmq_broker_ip}' host:" 8 140 --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting remote RabbitMQ configuration"
            exit 1
        fi
        rabbitmq_user_password=$(whiptail --passwordbox "\nPlease, provide the password of the '${rabbitmq_user_username}' user of the remote RabbitMQ Broker on the '${rabbitmq_broker_ip}' host:" 8 140 --title "Open Baton NFV Orchestrator (NFVO) configuration" 3>&1 1>&2 2>&3)
        exit_status="$?"
        if [ ${exit_status} != 0 ]; then
            echo ""
            log_warning_msg "Aborting remote RabbitMQ configuration"
            exit 1
        fi

        # Generate the password and creates the 'admin' user if not already existing
        # Check the NFVO version being installed: the new RabbitMQ configuration is required only from version >= 4.0.1
        compare_version_strings "4.0.0" "${openbaton_nfvo_version}"
        result=$?
        if [ ${result} -eq 1 ]; then
            export rabbitmq_admin_password=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c32)
        else
            export rabbitmq_admin_password="openbaton"
        fi
        ./rabbitmqadmin -H "${rabbitmq_broker_ip}" -u "${rabbitmq_user_username}" -p "${rabbitmq_user_password}" declare user name=admin password="${rabbitmq_admin_password}" tags=administrator
    fi

    # Sets permission to 'admin' user
    ./rabbitmqadmin -H "${rabbitmq_broker_ip}" -u "admin" -p "${rabbitmq_admin_password}" declare permission vhost="/" user="admin" configure=".*" write=".*" read=".*"

    # Sets the rabbitmq 'admin' password
    export rabbitmq_admin_password=${rabbitmq_admin_password}
    log_success_msg "Setting new 'admin' password: ${rabbitmq_admin_password}"
    log_warning_msg "You can find the 'admin' password in the '${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}' properties file as the value of the 'spring.rabbitmq.password' property"
    $_ex 'sed -i "s|spring.rabbitmq.password\s*=\s*.*|spring.rabbitmq.password=${rabbitmq_admin_password}|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    # Sets the rabbitmq broker ip
    rabbitmq_broker_ip=${rabbitmq_broker_ip:-$RABBITMQ_BROKER_IP_DEFAULT}
    export rabbitmq_broker_ip=${rabbitmq_broker_ip}
    log_success_msg "Setting new broker IP: ${rabbitmq_broker_ip}"
    $_ex 'sed -i "s|nfvo.rabbit.brokerIp\s*=\s*.*|nfvo.rabbit.brokerIp=${rabbitmq_broker_ip}|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    # Sets the rabbitmq management port
    rabbitmq_management_port=${rabbitmq_management_port:-$RABBITMQ_MANAGEMENT_PORT_DEFAULT}
    export rabbitmq_management_port=${rabbitmq_management_port}
    log_success_msg "Setting new management port: ${rabbitmq_management_port}"
    $_ex 'sed -i "s|nfvo.rabbit.management.port\s*=\s*15672|nfvo.rabbit.management.port=${rabbitmq_management_port}|g" ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}'

    #### Generic VNFM configuration
    export OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE=${OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE}
    # Check the NFVO version being installed: the new RabbitMQ configuration is required only from version >= 4.0.1
    compare_version_strings "4.0.0" "${openbaton_nfvo_version}"
    result=$?
    if [ ${result} -eq 1 ]; then
        export rabbitmq_ems_user_password=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c32)

        # Creates the "RABBITMQ_EMS_USER" user, then sets the permissions
        ./rabbitmqadmin -H "${rabbitmq_broker_ip}" -u "admin" -p "${rabbitmq_admin_password}" declare user name="${RABBITMQ_EMS_USER}" password="${rabbitmq_ems_user_password}" tags=administrator
        ./rabbitmqadmin -H "${rabbitmq_broker_ip}" -u "admin" -p "${rabbitmq_admin_password}" declare permission vhost="/" user="${RABBITMQ_EMS_USER}" configure=".*" write=".*" read=".*"

        # Set the rabbitmq 'RABBITMQ_EMS_USER' username
        export RABBITMQ_EMS_USER=${RABBITMQ_EMS_USER}
        log_success_msg "Setting the username for the RabbitMQ EMS user: ${RABBITMQ_EMS_USER}"
        $_ex 'sed -i "s|vnfm.ems.username\s*=\s*.*|vnfm.ems.username=${RABBITMQ_EMS_USER}|g" ${OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE}'

        # Set the rabbitmq 'RABBITMQ_EMS_USER' password
        log_success_msg "Setting new '${RABBITMQ_EMS_USER}' password: ${rabbitmq_ems_user_password}"
        log_warning_msg "The '${RABBITMQ_EMS_USER}' password has been randomly generated and you can find it in the '${OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE}' properties file as the value of the 'spring.rabbitmq.password' property"
        $_ex 'sed -i "s|vnfm.ems.password\s*=\s*.*|vnfm.ems.password=${rabbitmq_ems_user_password}|g" ${OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE}'
    else
        # Sets the rabbitmq 'admin' password
        export rabbitmq_admin_password=${rabbitmq_admin_password}
        log_success_msg "Setting new 'admin' password: ${rabbitmq_admin_password}"
        log_warning_msg "You can find the 'admin' password in the '${OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE}' properties file as the value of the 'spring.rabbitmq.password' property"
        $_ex 'sed -i "s|spring.rabbitmq.password\s*=\s*.*|spring.rabbitmq.password=${rabbitmq_admin_password}|g" ${OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE}'
    fi

    #### Generic VNFM configuration
    # Set the rabbitmq broker ip for the Generic VNFM retrieving its value from the NFVO properties file
    log_success_msg "Setting new broker IP: ${rabbitmq_broker_ip}"
    $_ex 'sed -i "s|vnfm.rabbitmq.brokerIp\s*=\s*.*|vnfm.rabbitmq.brokerIp=${rabbitmq_broker_ip}|g" ${OPENBATON_VNFM_GENERIC_CONFIG_FILE_ABSOLUTE}'
}


##################
#### Services ####
##################

create_service () {
    export component_name="${1}"
    export service_name="${2}"
    export service_properties_file_name_absolute="${3}"
    export OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE=${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}

    log_success_msg "Creating new Service '${service_name}'"
    echo "{ \"name\":\"${service_name}\", \"roles\":[\"default\"] }" > /tmp/create_service_body

    export nfvo_user="admin"
    export nfvo_admin_password=$( awk '$0 ~ "nfvo.security.admin.password[[:space:]]*="' "${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}" | awk -F'=' '{print $2}' )
    export nfvo_ip=$( awk '$0 ~ "nfvo.rabbit.brokerIp[[:space:]]*="' "${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}" | awk -F'=' '{print $2}' )
    https_enabled=$(cat ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE} | grep "nfvo.https=true" | wc -l)
    if [ "${https_enabled}" = "1" ]; then
        export nfvo_port=$( awk '$0 ~ "server.port[[:space:]]*="' "${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}" | awk -F'=' '{print $2}' )
    else
        export nfvo_port="8080"
    fi
    log_success_msg "NFVO_USER: ${nfvo_user}"
    log_success_msg "NFVO_ADMIN_PASSWORD: ****"
    log_success_msg "NFVO_USER: ${nfvo_ip}"
    log_success_msg "NFVO_PORT: ${nfvo_port}"

    # Get project id of 'default' project
    if [ "${https_enabled}" = "1" ]; then
        log_warning_msg "Using openbaton CLI with SSL mode enabled"
        project_id=$(openbaton -s -u "${nfvo_user}" -p "${nfvo_admin_password}" -ip "${nfvo_ip}" --nfvo-port "${nfvo_port}" -pid "" project list 2>/dev/null | grep default | sed s/\ //g | awk -F'|' '{print $2 }')
    else
        project_id=$(openbaton -u "${nfvo_user}" -p "${nfvo_admin_password}" -ip "${nfvo_ip}" --nfvo-port "${nfvo_port}" -pid "" project list 2>/dev/null | grep default | sed s/\ //g | awk -F'|' '{print $2 }')
    fi
    if [ -z "${project_id}" ]; then
        log_failure_msg "Problems while creating Service '${service_name}'"
        log_failure_msg "Skipping this Service registration. Please try to do it manually."
        return
    fi
    export project_id=${project_id}

    if [ "${https_enabled}" = "1" ]; then
        log_warning_msg "Using openbaton CLI with SSL mode enabled"
        service_key=$(openbaton -s -u "${nfvo_user}" -p "${nfvo_admin_password}" -ip "${nfvo_ip}" --nfvo-port "${nfvo_port}" -pid "${project_id}" service create /tmp/create_service_body 2>/dev/null)
    else
        service_key=$(openbaton -u "${nfvo_user}" -p "${nfvo_admin_password}" -ip "${nfvo_ip}" --nfvo-port "${nfvo_port}" -pid "${project_id}" service create /tmp/create_service_body 2>/dev/null)
    fi
    if [ -z "${service_key}" ]; then
        log_failure_msg "Problems while creating Service '${service_name}'"
        log_failure_msg "Skipping this Service registration. Please try to do it manually."
        return
    fi
    export service_key=${service_key}

    # Clean environment
    rm /tmp/create_service_body

    # Set service key in properties file
    log_success_msg "Setting Service key: ${service_key}"
    $_ex 'sed -i "s|${component_name}\.service\.key\s*=.*|${component_name}\.service\.key=${service_key}|g" ${service_properties_file_name_absolute}'
}


##############
#### Main ####
##############

wait_for_nfvo_up () {
    export OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE=${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}
    max_wait=300
    i_wait=${max_wait}

    # Find the port where the NFVO is running
    https_enabled=$(cat ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE} | grep "nfvo.https=true" | wc -l)
    if [ "${https_enabled}" = "1" ]; then
        export nfvo_port=$( awk '$0 ~ "server.port[[:space:]]*="' "${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}" | awk -F'=' '{print $2}' )
    else
        export nfvo_port="8080"
    fi

    echo " * Waiting for the NFVO to be up on port ${nfvo_port} .."
    while ! nc -z localhost ${nfvo_port}; do
        sleep 1 # wait for 1 second before check again
        i_wait=$((${i_wait}-1))
        if [ ${i_wait} -eq 0 ]; then
            echo " * The NFVO is not up after ${max_wait} seconds. Please, check the problem into the log file."
            exit 1
        fi
    done
}

clean_db () {
    component_name_fancy="${1}"
    component_db_name="${2}"
    component_mysql_user="${3}"

    # Clean MySQL for Components
    component_mysql_user=${component_mysql_user:-"undefined"}
    if [ "${component_mysql_user}" != "undefined" ]; then
        if (whiptail --title "Open Baton ${component_name_fancy} installation cleaning" --yesno "Do you want to delete the Open Baton ${component_name_fancy} database: '${component_db_name}' (this will also delete the associated user: '${component_mysql_user}')?\n(if you skip this step then you won't be able, later on, to delete this database and its user using this script):" 8 140) then
            exit_status="$?"
            if [ ${exit_status} != 0 ]; then
                echo ""
                log_warning_msg "Aborting Open Baton ${component_name_fancy} installation cleaning"
                exit 1
            fi

            mysql_root_password=$(whiptail --passwordbox "\nPlease, provide the password of the 'root' user of mysql [root]:" 8 140 root --title "Open Baton ${component_name_fancy} installation cleaning" 3>&1 1>&2 2>&3)
            exit_status="$?"
            if [ ${exit_status} != 0 ]; then
                echo ""
                log_warning_msg "Aborting Open Baton ${component_name_fancy} installation cleaning"
                exit 1
            fi

            echo " * Deleting Open Baton ${component_name_fancy} database and its associated user."
            mysql_root_password=${mysql_root_password:-$MYSQL_ROOT_PASSWORD_DEFAULT}
            mysql -uroot -p${mysql_root_password} -e "DROP DATABASE IF EXISTS ${component_db_name};" >/dev/null 2>&1
            mysql -uroot -p${mysql_root_password} -e "DROP USER ${component_mysql_user}@localhost;" >/dev/null 2>&1

            1>$(tty)
        else
            echo " * NOT deleting Open Baton ${component_name_fancy} database and its associated user."
        fi
    fi
}

clean () {
    export OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE=${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}
    export OPENBATON_FMS_CONFIG_FILE_ABSOLUTE=${OPENBATON_FMS_CONFIG_FILE_ABSOLUTE}

    mysql=$( dpkg -l | grep "mysql-client" | wc -l)

    # Retrieve mysql credentials and rabbitmq user, ip, and management port
    if [ -f "${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}" ]; then
        nfvo_mysql_user=$( awk -F'=' '{ if($0 ~ "spring.datasource.username=") { print $2 }}' ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE} )
        if [ -f "${OPENBATON_FMS_CONFIG_FILE_ABSOLUTE}" ]; then
            fms_mysql_user=$( awk -F'=' '{ if($0 ~ "spring.datasource.username=") { print $2 }}' ${OPENBATON_FMS_CONFIG_FILE_ABSOLUTE} )
        fi

        rabbitmq_user=$( awk -F'=' '{ if($0 ~ "spring.rabbitmq.username=") { print $2 }}' ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE} )
        rabbitmq_ip=$( awk -F'=' '{ if($0 ~ "nfvo.rabbit.brokerIp=") { print $2 }}' ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE} )
        rabbitmq_management_port=$( awk -F'=' '{ if($0 ~ "nfvo.rabbit.management.port=") { print $2 }}' ${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE} )
    else
        log_failure_msg "NFVO properties file '${OPENBATON_NFVO_CONFIG_FILE_ABSOLUTE}' not found: impossible to complete the installation cleaning"
    fi

    # Clean Open Baton binaries and properties files
    debian_packages_num=$( dpkg -l | grep openbaton | wc -l )
    for i in $( seq 1 ${debian_packages_num}); do
        package=$( dpkg -l | grep openbaton | head -1 | awk '{print $2}' )
        $_ex "apt-get purge -y ${package}"
    done

    # Clean Open Baton source code and properties files
    if [ -d ${OPENBATON_SOURCE_INSTALLATION_BASE_DIR} ]; then
        $_ex "rm -r ${OPENBATON_SOURCE_INSTALLATION_BASE_DIR}"
        if [ -d ${OPENBATON_BASE_CONFIG_DIR} ]; then
            $_ex "rm -r ${OPENBATON_BASE_CONFIG_DIR}"
        fi
    fi

    if [ ${mysql} -gt 0 ]; then
        # Clean MySQL for NFVO
        nfvo_mysql_user=${nfvo_mysql_user:-"undefined"}
        if [ "${nfvo_mysql_user}" != "undefined" ]; then
            clean_db "NFVO" "openbaton" "${nfvo_mysql_user}"
        fi
        # Clean MySQL for FMS
        fms_mysql_user=${fms_mysql_user:-"undefined"}
        if [ "${fms_mysql_user}" != "undefined" ]; then
            clean_db "FMS" "faultmanagement" "${fms_mysql_user}"
        fi
    fi

    # Retrieve rabbitmqadmin cli
    retrieve_rabbitmqadmin_cli ${rabbitmq_ip} ${rabbitmq_management_port}
    if [ $? -ne 0 ]; then
        log_failure_msg "rabbitmqadmin utility not retrievable: impossible to clean the RabbitMQ installation"
        echo " * Cleaning of Open Baton installation completed"
        exit 0
    fi

    # Clean RabbitMQ
    #./rabbitmqadmin delete vhost name="openbaton" #TODO
    echo " * Deleting Open Baton RabbitMQ user and its associated exchanges (if any)."
    ./rabbitmqadmin delete user name="${rabbitmq_user}"
    result=$(./rabbitmqadmin list exchanges | grep "openbaton-exchange" | wc -l)
    if [ ${result} -gt 0 ]; then
        ./rabbitmqadmin delete exchange name="openbaton-exchange"
    fi
    result=$(./rabbitmqadmin list exchanges | grep "plugin-exchange" | wc -l)
    if [ ${result} -gt 0 ]; then
        ./rabbitmqadmin delete exchange name="plugin-exchange"
    fi

    # Delete rabbitmqadmin CLI
    $_ex "rm ./rabbitmqadmin"

    # Delete openbaton CLI
    pip uninstall -y openbaton-cli

    1>$(tty)
    echo " * Cleaning of Open Baton installation completed"
}

prereq_openbaton_cli () {
    $_ex 'apt-get update; apt-get install -y python-pip;'

    # To fix an unset LC_ALL variable which cause the failure of the installation of packages through 'pip'
    language=$(locale 2>/dev/null | grep "LANG=" | awk -F'=' '{ print $2 }')
    export LC_ALL=${language}
}

upgrade () {
    # Check Open Baton installed
    openbaton_components_installed_num=$( dpkg -l | grep "openbaton-" | wc -l )
    if [ "${openbaton_components_installed_num}" = "0" ]; then
        log_warning_msg "Open Baton seems to not be installed: Upgrade procedure not possible."
        log_warning_msg "If you installed Open Baton through the SOURCE CODE then the Upgrade procedure is not supported."
        log_warning_msg "Exiting.."
        exit 1
    fi

    openbaton_components=${openbaton_components:-"none"}

    # If no component is specified at invocation time
    if [ "${openbaton_components}" = "none" ]; then
        if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
            openbaton_components_installed=$( dpkg -l | grep openbaton)
            echo ""
            log_success_msg "The  Open Baton components installed in this system are the following:"
            echo "${openbaton_components_installed}"
            echo ""
            openbaton_components=$(whiptail --inputbox "\nPlease, insert the components which you want to upgrade (separated by a comma if many) (comp1,comp2,etc.) [all]:" 8 140 all --title "Open Baton upgrade" 3>&1 1>&2 2>&3)
            if [ ${exit_status} != 0 ]; then
                echo ""
                log_warning_msg "Aborting Open Baton upgrade"
                exit 1
            fi
        fi

        # In case of "noninteractive" FRONTEND the default value will remain valid (all components will be upgraded)
        openbaton_components=${openbaton_components:-"all"}
    fi

    if [ "${openbaton_components}" = "all" ]; then
        # List all the components installed
        dpkg -l | grep "openbaton-" | while read -r line ; do
            component=$( echo ${line} | awk '{print $2}' )
            echo ""
            log_success_msg "Upgrading Open Baton '${component}' component"
            $_ex "apt-get install -y ${component}"
        done
    else
        echo "${openbaton_components}" | awk -F',' '{ for(i = 1; i <= NF; i++) { print $i; } }' | while read -r component ; do
            echo ""
            log_success_msg "Upgrading Open Baton '${component}' component"
            component_installed=$( dpkg -l | grep "${component}" | wc -l )
            if [ "${component_installed}" = "0" ]; then
                log_warning_msg "The Open Baton '${component}' component is not be installed: Upgrade procedure not possible."
                log_warning_msg "If you installed this Open Baton component through the SOURCE CODE then the Upgrade procedure is not supported."
                continue
            fi
            $_ex "apt-get install -y ${component}"
        done
    fi

    echo ""
    log_success_msg "Open Baton Upgrade complete."
}

