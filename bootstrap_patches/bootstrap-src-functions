#!/bin/sh

_tag="tags/3.1.1"


##########################
#### General Settings ####
##########################

set -e
set -u
#set -x # only for DEBUG

# Make available the functions defined in /lib/lsb/init-functions
. /lib/lsb/init-functions


##########################
#### Global Variables ####
##########################

#_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

_openbaton_base_repo="https://github.com/openbaton/NFVO.git"
_openbaton_plugins="http://get.openbaton.org/plugins/3.0.0/"
_openbaton_generic_vnfm_repo="https://github.com/openbaton/generic-vnfm.git"
_openbaton_fmsystem_repo="https://github.com/openbaton/fm-system.git"
_openbaton_asengine_repo="https://github.com/openbaton/autoscaling-engine.git"
_openbaton_nsengine_repo="https://github.com/openbaton/network-slicing-engine.git"

_base=/opt
_openbaton_base="${_base}/openbaton"
_openbaton_conf="/etc/openbaton"
_openbaton_log="/var/log/openbaton"
_nfvo="${_openbaton_base}/nfvo"
_nfvo_plugins="${_nfvo}/plugins"

_dashboard="${_openbaton_base}/dashboard"
_nfvo_vim_drivers="${_nfvo_plugins}/vim-drivers"
_generic_vnfm="${_openbaton_base}/generic-vnfm"
_zabbix_plugin="${_openbaton_base}/zabbix_plugin"

_installer_folder="${_base}/tmp"
_logfile="${_installer_folder}/log"
_tmpfolder=`mktemp -d`

_user="$(id -un 2>/dev/null || true)"


##################
#### RabbitMQ ####
##################

src_install_message_queue () {
    echo "installing message queue.."
    $_ex 'apt-get install -y rabbitmq-server'
    ulimit -S -n 4096
    export rabbitmq_admin_password="openbaton"
    $_ex 'rabbitmqctl add_user admin openbaton'
    $_ex 'rabbitmqctl set_user_tags admin administrator'
    $_ex 'rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"'
    $_ex 'rabbitmq-plugins enable rabbitmq_management'
    $_ex 'service rabbitmq-server restart'
    if [ $? -ne 0 ]; then
      echo "ERROR: rabbitmq is not running properly (check the problem in /var/log/rabbitmq)"
      exit 1
    fi
}

src_configure_message_queue () {
  brokerIp="$(ip -f inet -o addr show ens3|cut -d\  -f 7 | cut -d/ -f 1;)"
  export brokerIp=${brokerIp}
  if [ "${brokerIp}" != "" ]; then
      $_ex 'sed -i "s/nfvo.rabbit.brokerIp=localhost/nfvo.rabbit.brokerIp=${brokerIp}/g" /etc/openbaton/openbaton.properties'
  fi

  managementPort=15672
  export managementPort=${managementPort}
  if [ "${managementPort}" != "" ]; then
    $_ex 'sed -i "s/nfvo.rabbit.management.port=15672/nfvo.rabbit.management.port=${managementPort}/g" /etc/openbaton/openbaton.properties'
  fi
}


#############################
#### VIM-Drivers Plugins ####
#############################

src_download_plugins () {
    echo "Getting OpenBaton Plugins..."
    wget -nH --cut-dirs 2 -r --no-parent  --reject "index.html*" "${_openbaton_plugins}" -P "${_tmpfolder}"
    mkdir -p ${_nfvo_vim_drivers}
    cp -r ${_tmpfolder}/* "${_nfvo_vim_drivers}"
}


####################
#### Open Baton ####
####################

src_prereq () {
    # TODO differentiate between fedora, OS X, ubuntu..
    $_ex 'add-apt-repository -y ppa:openjdk-r/ppa ; apt-get update; apt-get -y install openjdk-8-jdk curl wget screen git'
    fix_java_security
}

src_check_environment () {
  _error=0
  echo "Checking environment..."
  check_binary java; _error=$(($_error + $?))
  check_binary javac; _error=$(($_error + $?))
  check_binary curl; _error=$(($_error + $?))
  check_binary screen; _error=$(($_error + $?))
  check_binary wget; _error=$(($_error + $?))
  if [ "0" != "$_error" ]; then
    echo >&2 "FAILED. Please install the above mentioned binaries."
    exit 1
  fi
}

src_create_openbaton_base () {
    echo "Creating the OpenBaton base folder"
    # removing it if exists
    $_ex 'rm -rf '$_openbaton_base
    $_ex 'mkdir -p '$_nfvo
    $_ex 'chown -R '"$_user $_openbaton_base"
}

src_create_openbaton_log () {
    echo "Creating the OpenBaton log folder"
    # removing it if exists
    $_ex 'rm -rf '$_openbaton_log
    $_ex 'mkdir -p '$_openbaton_log
    $_ex 'chown -R '"$_user $_openbaton_log"
}

src_checkout_nfvo () {
    echo "Getting OpenBaton..."
    src_create_openbaton_base
    src_create_openbaton_log
    git clone "${_openbaton_base_repo}" "${_nfvo}"

    cd "${_nfvo}"
    rm -rf ./dashboard/
    git checkout tags/3.0.1

    $_ex 'rm -rf '"${_openbaton_conf}; mkdir -p ${_openbaton_conf}"
    $_ex 'cp '"${_nfvo}/etc/openbaton.properties ${_openbaton_conf}/openbaton.properties" 
    $_ex 'sed -i "s+# nfvo.monitoring.ip = localhost+nfvo.monitoring.ip = localhost+g" /etc/openbaton/openbaton.properties'
    $_ex 'cp '"${_nfvo}/etc/keystore.p12 ${_openbaton_conf}/keystore.p12"

    cd "/home/ubuntu/autoscaling-sfc/bootstrap_patches/patched_code/"

    cp ACL_Matching_Criteria.java /opt/openbaton/nfvo/openbaton-libs/catalogue/src/main/java/org/openbaton/catalogue/mano/descriptor/ACL_Matching_Criteria.java

    cp NSRUtils.java /opt/openbaton/nfvo/core/core-impl/src/main/java/org/openbaton/nfvo/core/utils/NSRUtils.java

    cp Policy.java /opt/openbaton/nfvo/openbaton-libs/catalogue/src/main/java/org/openbaton/catalogue/mano/descriptor/Policy.java

    cp VNFForwardingGraphDescriptor.java /opt/openbaton/nfvo/openbaton-libs/catalogue/src/main/java/org/openbaton/catalogue/mano/descriptor/VNFForwardingGraphDescriptor.java

    cp VNFForwardingGraphRecord.java /opt/openbaton/nfvo/openbaton-libs/catalogue/src/main/java/org/openbaton/catalogue/mano/record/VNFForwardingGraphRecord.java

    cd "${_nfvo}"

}

src_compile_nfvo () {
    echo "compiling the NFVO"
    cd "${_nfvo}"
    ./openbaton.sh compile
    if [ $? -ne 0 ]; then
        echo "ERROR: The compilation of the NFVO failed"
        exit 1
    fi
}

src_start_nfvo () {
    echo "starting the NFVO"
    cd "${_nfvo}"
    ./openbaton.sh start
}

src_deploy_nfvo () {
    src_compile_nfvo
    install_mysql "openbaton.properties"
    src_set_openbaton_password
    src_start_nfvo
}

src_delete_openbaton_password () {
      $_ex 'sed -i "/^nfvo.security.admin.password =/d" /etc/openbaton/openbaton.properties'
}

src_set_openbaton_password () {
    # In case of "noninteractive" FRONTEND the default value will remain valid (user: admin ; password: openbaton)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        # Turning echo on and off between password reading
        stty -echo
        openbatonpswd="openbaton" ; echo
        stty echo
        if [ "${openbatonpswd}" != "" ]; then
            export openbatonpswd=${openbatonpswd}
            stty -echo
            openbatonpswd2="openbaton" ; echo
            stty echo
            export openbatonpswd2=${openbatonpswd2}
            if [ "${openbatonpswd}" = "${openbatonpswd2}" ]; then
                $_ex 'sed -i "s/# nfvo.security.admin.password\ =\ openbaton/nfvo.security.admin.password\ =\ ${openbatonpswd}/g" /etc/openbaton/openbaton.properties'
                return
            fi
        else
            src_set_openbaton_password
        fi
    fi
}


##############################
#### Additional Component ####

src_checkout_additional_component () {
    component_repo_url=${1}
    component_name=${2}                       # the directory on which the repo will be locally cloned
    component_name_fancy="${3}"
    component_properties_file_src="${4}"
    component_properties_file_dest="${5}"
    component_of_minimal_installation="${6}"
    checkout="${7}"

    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        # Ask for the specified Additional Component installation
        ac="Y"

        if [ "${ac}" = "" -o "${ac}" = "y" -o "${ac}" = "Y" ]; then
            cd "${_openbaton_base}"
            echo "Getting ${component_name_fancy} .."
            git clone --recursive "${component_repo_url}" "${component_name}"
            cd "${component_name}"
            git checkout ${checkout}
            $_ex 'cp '"${component_properties_file_src} ${_openbaton_conf}/${component_properties_file_dest}"
            installed=0
            return
        fi
    fi
    installed=1
}

src_compile_additional_component () {
    component_name=${1}                       # the directory on which the repo has been cloned
    component_name_fancy="${2}"

    echo "Compiling the ${component_name_fancy} .."
    cd "${_openbaton_base}/${component_name}"
    ./${component_name}.sh compile
    if [ $? -ne 0 ]; then
        echo "ERROR: The compilation of the Generic VNFM failed"
        exit 1
    fi
}

src_start_additional_component () {
    component_name=${1}                       # the directory on which the repo has been cloned
    component_name_fancy="${2}"
    
    echo "Starting the ${component_name_fancy} .."
    cd "${_openbaton_base}/${component_name}"
    ./${component_name}.sh start
}

src_deploy_additional_component () {
    src_compile_additional_component ${1} ${2}
    src_start_additional_component ${1} ${2}
}


src_zabbix_plugin() {
    cd $HOME
    wget https://raw.githubusercontent.com/openbaton/juju-charm/develop/hooks/zbx_helper.py   
    # modify any parameters like Zabbix username and password in the main function at the bottom of the script and execute the following: 
    python zbx_helper.py -a

    echo "starting installation of zabbix-plugin"
    sudo apt install -y git gradle
    git clone https://github.com/openbaton/zabbix-plugin.git ${_zabbix_plugin}
    cd ${_zabbix_plugin}
    git checkout tags/3.2.0
    
sudo sh -c 'echo "#!/bin/bash
to=\$1
body=\$3
curl -X POST -H \"Accept: application/json\" -H \"Content-Type: application/json\" -d \"\$body\" http://\$to
" > /usr/lib/zabbix/alertscripts/send_notification.sh'

    sudo chmod +x /usr/lib/zabbix/alertscripts/send_notification.sh

    sudo systemctl restart zabbix-server.service
    sleep 8

    $_ex 'sed -i "s_user-zbx=admin_user-zbx=Admin_g" src/main/resources/plugin.conf.properties'
    ./gradlew clean build -x test
    $_ex 'sudo mkdir -p /etc/openbaton/plugins/monitoring'
    $_ex 'sudo cp src/main/resources/plugin.conf.properties /etc/openbaton/openbaton-plugin-monitoring-zabbix.properties'
    
    sudo cp build/libs/*.jar "${_nfvo_plugins}"
    sudo cp build/libs/*.jar "${_nfvo_vim_drivers}"

    #echo "running jar command"
    #java -jar build/libs/*.jar
}

##############
#### Main ####
##############

src_bootstrap () {
    # install prerq
    src_prereq

    # checkout OpenBaton
    src_checkout_nfvo
    
    # check if all the required libraries are available
    src_check_environment

    # moved message queue installation and configuration part
    src_install_message_queue
    src_configure_message_queue
    # configure the Open Baton security 
    configure_security "openbaton.properties"


    # moved message queue installation part
    src_download_plugins
    # deploy and compile OpenBaton orchestrator
    

    #src_delete_openbaton_password

    src_zabbix_plugin

    src_deploy_nfvo

    
    brokerIp="$(ip -f inet -o addr show ens3|cut -d\  -f 7 | cut -d/ -f 1;)"
    export brokerIp=${brokerIp}
    
    # checkout the generic VNFM code
    src_checkout_additional_component "${_openbaton_generic_vnfm_repo}" "generic-vnfm" "Generic VNFM" "src/main/resources/application.properties" "openbaton-vnfm-generic.properties" true "tags/3.0.0"
    # deploy and compile the Generic VNFM
    
    if [ "${brokerIp}" != "" ]; then
      $_ex 'sed -i "s/vnfm.rabbitmq.brokerIp = localhost/vnfm.rabbitmq.brokerIp = ${brokerIp}/g" /opt/openbaton/generic-vnfm/src/main/resources/application.properties'
      $_ex 'sed -i "s/vnfm.rabbitmq.brokerIp = localhost/vnfm.rabbitmq.brokerIp = ${brokerIp}/g" /etc/openbaton/openbaton-vnfm-generic.properties'
    fi
    
    if [ "${installed}" = "0" ]; then src_deploy_additional_component "generic-vnfm" "Generic VNFM" ; fi


    # # checkout the Fault Management System
    # src_checkout_additional_component "${_openbaton_fmsystem_repo}" "fm-system" "Fault Management System (FMS)" "etc/fms.properties" "openbaton-fms.properties" false
    # # deploy and compile the Fault Management System
    # if [ "${installed}" = "0" ]; then src_deploy_additional_component "fm-system" "Fault Management System (FMS)" ; fi

    # checkout the Auto Scaling Engine
    src_checkout_additional_component "${_openbaton_asengine_repo}" "autoscaling-engine" "Auto Scaling Engine (ASE)" "etc/ase.properties" "autoscaling.properties" false "tags/1.2.2"
    # deploy and compile the Auto Scaling Engine
    
    if [ "${brokerIp}" != "" ]; then
      $_ex 'sed -i "s/autoscaling.rabbitmq.brokerIp=localhost/autoscaling.rabbitmq.brokerIp=${brokerIp}/g" /opt/openbaton/autoscaling-engine/etc/ase.properties'
      $_ex 'sed -i "s/autoscaling.rabbitmq.brokerIp=localhost/autoscaling.rabbitmq.brokerIp=${brokerIp}/g" /etc/openbaton/autoscaling.properties'
    fi
    
    if [ "${installed}" = "0" ]; then src_deploy_additional_component "autoscaling-engine" "Auto Scaling Engine (ASE)" ; fi

    # # checkout the Network Slicing Engine
    # src_checkout_additional_component "${_openbaton_nsengine_repo}" "network-slicing-engine" "Network Slicing Engine (NSE)" "etc/nse.properties" "openbaton-nse.properties" false
    # # deploy and compile the Network Slicing Engine
    # if [ "${installed}" = "0" ]; then src_deploy_additional_component "network-slicing-engine" "Network Slicing Engine" ; fi

    echo " * [INFO] Waiting for Open Baton to be up..."
	while ! nc -z localhost 8080; do   
	  	sleep 1 # wait for 1 second before check again
	done
    echo " * [INFO] Now open http://localhost:8080/"

}

