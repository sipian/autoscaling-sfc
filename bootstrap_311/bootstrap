#!/bin/sh
#
# This script allows you to install openbaton. To execute it:
#
# sh <(curl -s http://get.openbaton.org/bootstrap) [release | nightly | develop]

###############
#### Usage ####
###############

usage () {
    echo "Usage:"
    echo "./bootstrap [release | nightly | develop]                                            (if the script is already locally available)"
    echo "sh <(curl -s http://get.openbaton.org/bootstrap) [release | nightly | develop]       (otherwise)"
}

if [ ${#} -gt 1 ]; then
    usage
    exit 1
fi


##########################
#### General Settings ####
##########################

set -e
set -u
#set -x # only for DEBUG

# Make available the functions defined in /lib/lsb/init-functions
. /lib/lsb/init-functions


##########################
#### Global Variables ####
##########################

BOOTSTRAP_DIR=$(pwd)
USER="$(id -un 2>/dev/null || true)"

OPENBATON_BOOTSTRAP_SRC_FUNCTIONS_URL=http://get.openbaton.org/bootstrap-src-functions
OPENBATON_BOOTSTRAP_DEB_FUNCTIONS_URL=http://get.openbaton.org/bootstrap-deb-functions

OPENJDK_8_LINUX_X86_64_SECURITYFILE="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/security/java.security"
OPENJDK_8_LINUX_I386_SECURITYFILE="/usr/lib/jvm/java-8-openjdk-i386/jre/lib/security/java.security"
OPENJDK_8_OSX_SECURITYFILE="/Library/Java/JavaVirtualMachines/jdk1.8.*.jdk/Contents/Home/jre/lib/security/java.security"

DEBIAN_FRONTEND_DEFAULT=interactive
DEBIAN_FRONTEND=${DEBIAN_FRONTEND:-$DEBIAN_FRONTEND_DEFAULT}


###############
#### Usage ####
###############

usage () {
    echo "Usage:"
    echo "./bootstrap                                                 (if the script is already locally available)"
    echo "sh <(curl -s http://get.openbaton.org/bootstrap)            (otherwise)"
}


##############################
#### Execution privileges ####
##############################

check_binary () {
  echo -n " * Checking for '$1' ... "
  if command -v $1 >/dev/null 2>&1; then
     echo "OK"
     return 0
  else
     echo >&2 "FAILED"
     return 1
  fi
}

_ex='sh -c'
if [ "${USER}" != "root" ]; then
    if check_binary sudo; then
        _ex='sudo -E sh -c'
    elif check_binary su; then
        _ex='su -c'
    fi
fi


##################
#### Security ####
##################

configure_security () {
    export properties_file_name=${1}

    # In case of "noninteractive" FRONTEND the default value will remain valid (see in lines below)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        https="N"
        export https=${https}
        if [ "${https}" != "" ]; then
            if [ "${https}" = "y" -o "${https}" = "Y" -o "${https}" = "yes" ]; then
                log_success_msg "Enabling HTTPS .."

                # server.port = 8443
                $_ex 'sed -i "s/# server.port = 8443/server.port = 8443/g" /etc/openbaton/${properties_file_name}'
                # server.ssl.enabled = true
                $_ex 'sed -i "s/# server.ssl.enabled = true/server.ssl.enabled = true/g" /etc/openbaton/${properties_file_name}'
                # server.ssl.key-store = /etc/openbaton/keystore.p12
                $_ex 'sed -i -e "s@# server.ssl.key-store = \/etc\/openbaton\/keystore.p12@server.ssl.key-store = \/etc\/openbaton\/keystore.p12@g" /etc/openbaton/${properties_file_name}'
                # server.ssl.key-store-password = password
                $_ex 'sed -i "s/# server.ssl.key-store-password = password/server.ssl.key-store-password = password/g" /etc/openbaton/${properties_file_name}'
                # server.ssl.keyStoreType = PKCS12
                $_ex 'sed -i "s/# server.ssl.keyStoreType = PKCS12/server.ssl.keyStoreType = PKCS12/g" /etc/openbaton/${properties_file_name}'
                # server.ssl.keyAlias = tomcat
                $_ex 'sed -i "s/# server.ssl.keyAlias = tomcat/server.ssl.keyAlias = tomcat/g" /etc/openbaton/${properties_file_name}'
                # nfvo.https = false
                $_ex 'sed -i "s/# nfvo.https = false/nfvo.https = true/g" /etc/openbaton/${properties_file_name}'
            fi                                                                                                                                   
        fi        
    fi
}

fix_java_security () {
    ostype=$(uname -a | awk -F ' ' '{ print $1 }')
    if [ "${ostype}" = "Linux" ]; then
        arch=$(uname -m)
        if [ "${arch}" = "x86_64" ]; then
            export OPENJDK_7_LINUX_X86_64_SECURITYFILE=${OPENJDK_8_LINUX_X86_64_SECURITYFILE}
            $_ex "sed -i "s_securerandom.source=file:/dev/random_securerandom.source=file:/dev/./random_g" ${OPENJDK_8_LINUX_X86_64_SECURITYFILE}"
        else
            export OPENJDK_7_LINUX_I386_SECURITYFILE=${OPENJDK_8_LINUX_I386_SECURITYFILE}
            $_ex "sed -i "s_securerandom.source=file:/dev/random_securerandom.source=file:/dev/./random_g" ${OPENJDK_8_LINUX_I386_SECURITYFILE}"
        fi
    elif [ "${ostype}" = "Darwin" ]; then
        export OPENJDK_7_OSX_SECURITYFILE=${OPENJDK_8_OSX_SECURITYFILE}
        $_ex 'sed -i "" "s_securerandom.source=file:/dev/random_securerandom.source=file:/dev/./random_g" ${OPENJDK_8_OSX_SECURITYFILE}'
    fi
}


###############
#### MySQL ####
###############

configure_mysql () {
    export properties_file_name=${1}

    log_success_msg "Configuring MySQL for Open Baton .."        
    $_ex 'sed -i "s/spring.datasource.url=jdbc:hsqldb:file:\/tmp\/openbaton\/openbaton.hsdb/# spring.datasource.url=jdbc:hsqldb:file:\/tmp\/openbaton\/openbaton.hsdb/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver/# spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/spring.jpa.database-platform=org.hibernate.dialect.HSQLDialect/# spring.jpa.database-platform=org.hibernate.dialect.HSQLDialect/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/spring.jpa.hibernate.ddl-auto=create-drop/# spring.jpa.hibernate.ddl-auto=create-drop/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/# spring.jpa.hibernate.ddl-auto=update/spring.jpa.hibernate.ddl-auto=update/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/# spring.datasource.validationQuery=SELECT 1/spring.datasource.validationQuery=SELECT 1/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/# spring.datasource.testOnBorrow=true/spring.datasource.testOnBorrow=true/g" /etc/openbaton/${properties_file_name}'
    # Enable MySQL
    $_ex 'sed -i "s/# spring.datasource.url=jdbc:mysql:\/\/localhost:3306\/openbaton/spring.datasource.url=jdbc:mysql:\/\/localhost:3306\/openbaton/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/# spring.datasource.driver-class-name=com.mysql.jdbc.Driver/spring.datasource.driver-class-name=com.mysql.jdbc.Driver/g" /etc/openbaton/${properties_file_name}'
    $_ex 'sed -i "s/# spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect/spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect/g" /etc/openbaton/${properties_file_name}'
    
    # In case of "noninteractive" FRONTEND the default value will remain valid (sqluser: admin ; sqlpassword: changeme)
    # Redundant check since the 'configure_mysql' function is executed only when 'DEBIAN_FRONTEND != noninteractive'
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        sqluser="admin"
        export dbuser=admin
        export dbpassword=changeme
        if [ "${sqluser}" != "" ]; then
            dbuser=${sqluser}
            $_ex 'sed -i "s/spring.datasource.username=admin/spring.datasource.username=${dbuser}/g" /etc/openbaton/${properties_file_name}'
        fi
        # Turning echo on and off between password reading
        stty -echo
        sqlpassword="root" ; echo
        stty echo
        if [ "${sqlpassword}" != "" ]; then
            dbpassword=${sqlpassword}
            $_ex 'sed -i "s/spring.datasource.password=changeme/spring.datasource.password=${dbpassword}/g" /etc/openbaton/${properties_file_name}'
        fi                                                                                                                                                
        # Turning echo on and off between password reading          
        stty -echo
        rootpasswd="root" ; echo
        stty echo
        if [ "${rootpasswd}" = "" ]; then
            rootpasswd=root
        fi
        # Create the Database
        mysql -uroot -p${rootpasswd} -e "CREATE DATABASE openbaton /*\!40100 DEFAULT CHARACTER SET utf8 */;"
        mysql -uroot -p${rootpasswd} -e "CREATE USER ${dbuser}@localhost IDENTIFIED BY '${dbpassword}';"
        mysql -uroot -p${rootpasswd} -e "GRANT ALL ON openbaton.* TO '${dbuser}'@'localhost';"
        mysql -uroot -p${rootpasswd} -e "FLUSH PRIVILEGES;"
        mysql -uroot -p${rootpasswd} -e "USE openbaton;"
    fi
}

install_mysql () {
    properties_file_name=${1}

    # In case of "noninteractive" FRONTEND the default value will remain valid (sqluser: admin ; sqlpassword: changeme)
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        mysql="Y"
        if [ "${mysql}" = "" -o "${mysql}" = "y" -o "${mysql}" = "Y" -o "${mysql}" = "yes" ]; then
            echo " * [INFO] Enabling MySQL Persistence"
            $_ex 'apt-get update'
            $_ex 'apt-get install -y mysql-server'
            configure_mysql ${properties_file_name}
        else
            echo " * [WARN] NOT Enabling MySQL Persistence"
        fi
    fi
}


##############
#### Main ####
##############

main_src () {
    #wget "${OPENBATON_BOOTSTRAP_SRC_FUNCTIONS_URL}"
    . ./bootstrap-src-functions
    src_bootstrap
}

main_deb () {
    #wget "${OPENBATON_BOOTSTRAP_DEB_FUNCTIONS_URL}"
    . ./bootstrap-deb-functions
    deb_bootstrap ${1}
}


prerequiste () {
    x=$(cat /etc/hostname)
    echo "changing hostname --> $x"
    sudo sed -i "1s/.*/127.0.0.1 localhost $x/" /etc/hosts

    sudo apt-get -y upgrade
    sudo apt-get update

    sudo apt-get install -y apache2
    sudo ufw allow in "Apache Full"

    #mysql
    echo "insalling mysql : give password as root"
    sudo apt-get install -y mysql-server

    #php
    sudo apt-get install -y php libapache2-mod-php php-mcrypt php-mysql

    sudo sed -i "s_DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm_DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm_g" /etc/apache2/mods-enabled/dir.conf

    sudo systemctl restart apache2
    sudo systemctl status apache2

    echo "installing zabbix server"
    sudo apt-get install -y php7.0-xml php7.0-bcmath php7.0-mbstring
    mkdir -p $HOME/zabbix-server
    cd $HOME/zabbix-server

    wget http://repo.zabbix.com/zabbix/3.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.0-2+xenial_all.deb
    sudo dpkg -i zabbix-release_3.0-2+xenial_all.deb
    sudo apt-get update
    sudo apt-get install -y zabbix-server-mysql zabbix-frontend-php
    mysql --user="root" --password="root" --execute="create database zabbix character set utf8 collate utf8_bin;"
    mysql --user="root" --password="root" --execute="grant all privileges on zabbix.* to zabbix@localhost identified by 'root';"
    mysql --user="root" --password="root" --execute="flush privileges;"
    zcat /usr/share/doc/zabbix-server-mysql/create.sql.gz | mysql -uzabbix -proot zabbix

    sudo sed -i "s_# DBPassword=_DBPassword=root_g" /etc/zabbix/zabbix_server.conf
    sudo sed -i "s+# php_value date.timezone Europe/Riga+php_value date.timezone Asia/Kolkata+g" /etc/zabbix/apache.conf

    sudo systemctl restart apache2
    sudo systemctl start zabbix-server
    sudo systemctl enable zabbix-server
    sudo systemctl status zabbix-server
    cd $HOME

}

main () {
    read -p "Install prerequistes y/n : " choice
    if [ "$choice" = "y" ]; then
        prerequiste
        sleep 7
    fi

    # In case of "noninteractive" FRONTEND the latest RELEASE package will be installed
    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        echo "Welcome to the Open Baton menu installation."
        echo "Available installation types are the following:"
        echo "    1. develop (SOURCE): it will be downloaded the source code for all the components which will be executed in screens"
        echo "    2. release (DEBIAN): it will be installed the binary version of the latest released version"
        echo "    3. nightly (DEBIAN): it will be installed the binary version of the latest nightly build"
        install_type=1
        case ${install_type} in
            1 ) 
                main_src ;;
            3 ) 
                main_deb unstable;;
            * ) 
                main_deb stable ;;
        esac
    else
        main_deb stable
    fi

    log_success_msg "Open Baton installation complete"
}

prereq () {
    $_ex 'apt-get install -y wget'
}


#####################
#### Entry Point ####
#####################

prereq

if [ -n "${1+1}" ]; then
    case ${1} in
        "release" )
            echo " * [INFO] Installing the latest RELEASE package"
            main_deb stable ;;
        "nightly" )
            echo " * [INFO] Installing the latest NIGHTLY-BUILD package"
            main_deb unstable ;;
        "develop" )
            echo " * [INFO] Installing the latest source code"
            main_src ;;
        *)
            usage
            exit 1 ;;
    esac
else
    main
fi

