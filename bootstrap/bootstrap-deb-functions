#!/bin/sh

##########################
#### General Settings ####
##########################

set -u
#set -x # only for DEBUG


##########################
#### Global Variables ####
##########################

OPENBATON_COMPONENT_AUTOSTART_DEFAULT="true"


####################
#### Open Baton ####
####################

deb_add_openbaton_repo_reference () {
    export release_nightly="${1}"
    export distribution_codename="${2}"

    # Add Open Baton Public Key to the APT keys
    $_ex 'wget -O - http://get.openbaton.org/keys/openbaton.public.key | apt-key add -'

    # Add Open Baton Repo to sources.list file
    result=$(grep /etc/apt/sources.list -e "deb http://get.openbaton.org/repos/openbaton/${distribution_codename}/${release_nightly} ${distribution_codename} main" | wc -l)
    if [ ${result} -eq 0 ]; then
        $_ex 'echo "\n## Open Baton repository" >> /etc/apt/sources.list'
        $_ex 'echo "deb http://get.openbaton.org/repos/openbaton/${distribution_codename}/${release_nightly} ${distribution_codename} main" >> /etc/apt/sources.list'
    fi
    $_ex 'apt-get update'
}

##############
#### NFVO ####

deb_install_nfvo () {
    export release_nightly="${1}"
    export oldest_nfvo_version_supported="${2}"
    export nfvo_version="${3}"

    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        available_tags=$(curl -s GET https://api.github.com/repos/openbaton/${OPENBATON_NFVO_REPO_NAME}/tags | grep "name\":" | awk -F':' '{print $2}' | awk -F'"' '{print $2}' | awk -v oldest="${oldest_nfvo_version_supported}" '$1 >= oldest' | grep "^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$")

        valid_version=false
        while [ "${valid_version}" = "false" ]; do
            # Ask for the NFVO version to be installed
            nfvo_version=$(whiptail --inputbox "Which VERSION of the Open Baton NFVO do you want to install?\nThe available choices installable with this bootstrap are the following:\n\n$(echo "latest\n${available_tags}")" 25 140 latest --title "Open Baton NFV Orchestrator (NFVO) installation" 3>&1 1>&2 2>&3)
            exit_status="$?"
            if [ ${exit_status} != 0 ]; then
                echo ""
                log_warning_msg "Aborting Open Baton installation"
                exit 1
            fi

            if [ "${nfvo_version}" = "" -o "${nfvo_version}" = "latest" ]; then
                valid_version=true
                continue
            else
                result=$( echo ${nfvo_version} | grep "^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$" | wc -l )
                if [ "${result}" != "0" ]; then
                    valid_version=true
                    continue
                fi
            fi
        done
    fi
    if [ "${nfvo_version}" = "" -o "${nfvo_version}" = "latest" ]; then
        nfvo_version=""
    else
        nfvo_version="=${nfvo_version}"
    fi

    # Install the correct NFVO package according to the given input parameter
    if [ "${release_nightly}" = "release" ]; then
        $_ex 'apt-get install -y --allow-unauthenticated openbaton-nfvo${nfvo_version}'
    else
        $_ex 'apt-get install -y openbaton-nfvo-nightly${nfvo_version}'
    fi    
}

deb_restart_nfvo () {
    if $_ex 'systemctl restart openbaton-nfvo.service' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton NFVO .."
    elif $_ex 'service openbaton-nfvo restart' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton NFVO .."
    elif $_ex 'restart openbaton-nfvo' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton NFVO .."
    else
        log_failure_msg "Restaring the Open Baton NFVO"
    fi
}

###############################
#### Additional Components ####

deb_install_additional_component_versioned () {
    if [ "${component_version}" = "" -o "${component_version}" = "latest" ]; then
        component_version=""
    else
        component_version="=${component_version}"
    fi

    if [ "${release_nightly}" = "release" ]; then
        $_ex 'apt-get install -y --allow-unauthenticated openbaton-${component_name}${component_version}'
    else
        $_ex 'apt-get install -y openbaton-${component_name}-nightly${component_version}'
    fi
}


deb_install_additional_component () {
    export release_nightly="${1}"
    export component_name="${2}"
    export component_name_fancy="${3}"
    export install_during_noninteractive_installation="${4}"
    export force_component_version="${5}"
    export oldest_component_version_supported="${6}"
    export component_repo_name="${7}"
    export component_version="${8}"

    if [ "${DEBIAN_FRONTEND}" != "Noninteractive" -a "${DEBIAN_FRONTEND}" != "noninteractive" ]; then
        # Ask for the specified Additional Component installation
        if (whiptail --title "Open Baton ${component_name_fancy} installation" --yesno "Do you want to install also the ${component_name_fancy}?\nIf you do not, then you can still install it later with:\n sudo apt-get install openbaton-${component_name}" 15 140) then
            exit_status="$?"
            if [ ${exit_status} != 0 ]; then
                echo ""
                log_warning_msg "Aborting Open Baton installation"
                exit 1
            fi

            # Install the correct Additional Component package according to the given input parameter
            if [ ${force_component_version} != "true" ]; then 
                available_tags=$(curl -s GET https://api.github.com/repos/openbaton/${component_repo_name}/tags | grep "name\":" | awk -F':' '{print $2}' | awk -F'"' '{print $2}' | awk -v oldest="${oldest_component_version_supported}" '$1 >= oldest' | grep "^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$")

                valid_version=false
                while [ "${valid_version}" = "false" ]; do
                    # Ask for the Additional Component version to be installed
                    component_version=$(whiptail --inputbox "Which VERSION of the Open Baton ${component_name_fancy} do you want to install?\nThe available choices installable with this bootstrap are the following:\n\n$(echo "${available_tags}")" 25 140 latest --title "Open Baton ${component_name_fancy} installation" 3>&1 1>&2 2>&3)
                    exit_status="$?"
                    if [ ${exit_status} != 0 ]; then
                        echo ""
                        log_warning_msg "Aborting Open Baton installation"
                        exit 1
                    fi

                    if [ "${component_version}" = "" -o "${component_version}" = "latest" ]; then
                        valid_version=true
                        continue
                    else
                        result=$( echo ${component_version} | grep "^[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}$" | wc -l )
                        if [ "${result}" != "0" ]; then
                            valid_version=true
                            continue
                        fi
                    fi
                done
            fi

            deb_install_additional_component_versioned
        else
            echo " * Open Baton ${component_name_fancy} not installed"
            if [ "${release_nightly}" = "release" ]; then
                echo " * To install the latest release package:"
                echo " *     sudo apt-get install openbaton-${component_name}"
            else
                echo " * To install the latest nightly-build package:"
                echo " *     sudo apt-get install openbaton-${component_name}-nightly"
            fi
            return
        fi
    else
        if [ "${install_during_noninteractive_installation}" = "y" -o "${install_during_noninteractive_installation}" = "Y" -o "${install_during_noninteractive_installation}" = "yes" ]; then
            # Install the correct Additional Component package according to the given input parameter
            deb_install_additional_component_versioned
        fi
    fi
}

deb_restart_additional_component () {
    export component_name=${1}
    export component_name_fancy="${2}"

    if $_ex 'systemctl restart openbaton-${component_name}.service' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton ${component_name_fancy} .."
    elif $_ex 'service openbaton-${component_name} restart' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton ${component_name_fancy} .."
    elif $_ex 'restart openbaton-${component_name}' >/dev/null 2>&1 ; then
        log_success_msg "Restarting the Open Baton ${component_name_fancy} .."
    else                                                        
        log_failure_msg "Restarting the Open Baton ${component_name_fancy}"
    fi
}

deb_is_additional_component_installed () {
    export component_name=${1}

    installed=$(dpkg -l | grep -v grep | grep "openbaton-${component_name}" | wc -l)
    if [ ${installed} -eq 0 ]; then
        installed=1 # not installed
    else
        installed=0 # installed
    fi
}


###################
#### Bootstrap ####
###################

deb_bootstrap () {
    export DEBIAN_FRONTEND=${openbaton_installation_mode:-$DEBIAN_FRONTEND_DEFAULT}
    export OPENBATON_COMPONENT_AUTOSTART="${openbaton_component_autostart:-$OPENBATON_COMPONENT_AUTOSTART_DEFAULT}"

    # ${1}=(release/nightly) ; ${2}=distribution_codename
    deb_add_openbaton_repo_reference "${1}" "${2}"
    deb_install_nfvo "${1}" "3.2.0" "${openbaton_nfvo_version}"
    install_mysql
    enable_https
    fix_jvm_delay_for_random_number_generation

    # Check need of restart the NFVO
    if [ "${OPENBATON_COMPONENT_AUTOSTART}" = "true" ]; then
        if [ "${mysql}" = "" -o "${mysql}" = "y" -o "${mysql}" = "Y" -o "${mysql}" = "yes" ]; then
            nfvo_restart_required="yes"
        fi

        if [ "${https}" = "y" -o "${https}" = "Y" -o "${https}" = "yes" ]; then
            nfvo_restart_required="yes"
        fi

        if [ "${nfvo_restart_required}" = "yes" ]; then
            deb_restart_nfvo
        fi
    fi

    # Command Line Interface
    prereq_openbaton_cli
    pip install openbaton-cli

    #
    # Arguments of "deb_install_additional_component": ${1}=(release/nightly) component-name component-name-fancy install_during_noninteractive_installation force_component_version oldest_component_version_supported component_repo_name component_version
    #

    # OpenStack VIM Driver Plugin
    deb_install_additional_component ${1} plugin-vimdriver-openstack-4j "OpenStack VIM Driver Plugin" ${openbaton_plugin_vimdriver_openstack} false "3.2.2" "${OPENBATON_PLUGINS_VIMDRIVERS_OPENSTACK_4J_REPO_NAME}" ${openbaton_plugin_vimdriver_openstack_version}

    # Generic VNFM
    deb_install_additional_component ${1} vnfm-generic "VNFM Generic (VNFMG)" ${openbaton_vnfm_generic} false "3.2.0" "${OPENBATON_VNFM_GENERIC_REPO_NAME}" ${openbaton_vnfm_generic_version}

    # Fault Management System
    deb_install_additional_component ${1} fms "Fault Management System (FMS)" ${openbaton_fms} false "1.2.4" "${OPENBATON_FMS_REPO_NAME}" ${openbaton_fms_version}

    # Auto Scaling Engine
    deb_install_additional_component ${1} ase "Auto Scaling Engine (ASE)" ${openbaton_ase} false "1.2.2" "${OPENBATON_ASE_REPO_NAME}" ${openbaton_ase_version}

    # Network Slicing Engine
    deb_install_additional_component ${1} nse "Network Slicing Engine (NSE)" ${openbaton_nse} false "1.1.2" "${OPENBATON_NSE_REPO_NAME}" ${openbaton_nse_version}

    log_success_msg "Finalising Open Baton installation .."
    if [ "${OPENBATON_COMPONENT_AUTOSTART}" = "true" ]; then
        # To be sure that the NFVO is up before trying to create the services
        wait_for_nfvo_up

        # Fault Management System
        deb_is_additional_component_installed fms ; if [ "${installed}" = "0" ]; then create_service "fms" "fms" "${OPENBATON_FMS_CONFIG_FILE_ABSOLUTE}" ; fi

        # Auto Scaling Engine
        deb_is_additional_component_installed ase ; if [ "${installed}" = "0" ]; then create_service "ase" "autoscaling-engine" "${OPENBATON_ASE_CONFIG_FILE_ABSOLUTE}" ; fi

        # Network Slicing Engine
        deb_is_additional_component_installed nse ; if [ "${installed}" = "0" ]; then create_service "nse" "nse" "${OPENBATON_NSE_CONFIG_FILE_ABSOLUTE}" ; fi

        log_success_msg "Restarting Open Baton components .."
        deb_restart_nfvo
        wait_for_nfvo_up # Some components needs the NFVO to be up in order to start correctly
        deb_is_additional_component_installed vnfm-generic ; if [ "${installed}" = "0" ]; then deb_restart_additional_component vnfm-generic "Generic VNFM" ; fi
        deb_is_additional_component_installed fms ; if [ "${installed}" = "0" ]; then deb_restart_additional_component fms "Fault Management System" ; fi
        deb_is_additional_component_installed ase ; if [ "${installed}" = "0" ]; then deb_restart_additional_component ase "Auto Scaling Engine" ; fi
        deb_is_additional_component_installed nse ; if [ "${installed}" = "0" ]; then deb_restart_additional_component nse "Network Slicing Engine" ; fi
    fi

    if [ -f "${BOOTSTRAP_DIR}/bootstrap-deb-functions" ]; then
        rm ${BOOTSTRAP_DIR}/bootstrap-deb-functions
    fi
}

